#!/usr/bin/env node

require("dotenv").config();

const { connect, disconnect } = require("../config/database");

const userService = require("@internal/services-v1/user.service");
const tagCategoryService = require("@internal/services-v1/tagCategory.service");
const tagService = require("@internal/services-v1/tag.service");

const tagCategoriesData = require("@internal/constants/data/tagCategories.data.json");
const tagsData = require("@internal/constants/data/tags.data.json");
const { TC } = require("@internal/constants/");

const figlet = require("figlet");
const chalk = require("chalk");
const boxen = require("boxen");
const prompts = require("prompts");
const ora = require("ora");

const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,32})/;
const emailRegex = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

const runInstallation = async () => { 
    try {
        const databaseSpinner = ora("Loading database\n").start();
        await connect();
        databaseSpinner.succeed("Database loaded!\n");

        const welcome = figlet.textSync("Blockify", {
            font: "Big",
            horizontalLayout: 'default',
            verticalLayout: 'default',
            width: 90,
            whitespaceBreak: true
        });

        const customWelcome = boxen(chalk.bold.white(welcome), {
            padding: 1,
            margin: 1,
            borderStyle: "round"
        })

        //Welcome text
        console.log(customWelcome);
        let option = 0;

        do {
            console.log(`\n\n${chalk.bold.hex("#E91E63")("Intalation CLI")}\n\n`)

            const { value } = await prompts({
                type: "select",
                name: "value",
                message: "What do you want to do?",
                choices: [
                    { title: "Create a superuser", description: "A user with all the privileges", value: 1 },
                    { title: "Load catalogs", description: "Populate the DB with default data", value: 2 },
                    { title: "Exit", description: "Goodbye!", value: 0 },
                ]
            });

            option = value;

            switch (option) { 
                case 1:
                    await registerSuperuser();
                    break;
                case 2:
                    await loadCatalogs();
                    break;
            }

        } while (option != 0);

        
    } catch (error) {
        console.log(error);
        console.log(chalk.bold.hex("#F44336")("Error in istalation"));
    } finally { 
        await disconnect();
        console.log(chalk.bold.hex("#00BCD4")("See ya!"))
    }
}

const registerSuperuser = async () => { 
    let flagUserInfo = false;
    let aborted = false;
    let userInfo = {};

    //Superuser configuration
    do {
        console.log(`\n\n${chalk.bold.whiteBright("Superuser configuration")}\n\n`);

        const user = await prompts([
            {
                type: "text",
                name: "firstname",
                message: "Your firstname?"
            },
            {
                type: "text",
                name: "lastname",
                message: "Your lastname?"
            },
            {
                type: "text",
                name: "username",
                message: "Give me a username:",
                validate: (value) => value.length < 4 ? `Min length: 4` : true
            },
            {
                type: "password",
                name: "password",
                message: "A super secure password: ",
                validate: (value) => !passwordRegex.test(value) ? "At least 1 Upper 1 Lower 1 Number, and length between 8 and 32 chars" : true,
            },
            {
                type: "text",
                name: "email",
                message: "An email:",
                validate: value => !emailRegex.test(value) ? "Incorrect email format" : true
            },
        ], {
                onCancel:  () => {aborted = true}
        });

        if (aborted) return;

        userInfo = { ...user };
        
        const confirm = await prompts({
            type: "toggle",
            name: "value",
            message: "Are you sure?",
            active: "yes",
            inactive: "no"
        });

        flagUserInfo = confirm.value;
    } while (!flagUserInfo);

    const userSpinner = ora({
        text: "Registering user",
        color: "cyan"
    }).start();

    const { status: userExists } =
        await userService.findOneByUsernameOrEmail(userInfo.username, userInfo.email);
    
    if (userExists) {
        userSpinner.fail(chalk.bold.hex("#F44336")("User already exists"));
        return;
    }

    await userService.register(userInfo, true);
    userSpinner.succeed(chalk.bold.hex("#4CAF50")("User registration complete"));
}

const loadCatalogs = async () => { 
    console.log(`\n\n${chalk.bold.whiteBright("Load Catalogs Process")}\n\n`);

    //Tag categories dump data
    const tagCategoriesSpinner = ora("Loading Tag Categories").start();

    const { status: defaultTCExists } = await tagCategoryService.findByAbbr(TC.DEFAULTABBR);
    if (!defaultTCExists)
        await tagCategoryService.create(TC.DEFAULTNAME, TC.DEFAULTDESC, TC.DEFAULTABBR);

    const tagCatsPromises = tagCategoriesData.map(async ({ abbr, name, description}) => { 
        const { status: tagCategoryExists } = await tagCategoryService.findByAbbr(abbr);

        if (!tagCategoryExists) {
            await tagCategoryService.create(name, description, abbr);
            return true;
        } else { 
            return false
        }
    });

    const TCAcceptance = await Promise.all(tagCatsPromises);
    tagCategoriesSpinner.succeed("Tag categories loaded");

    //Tags dump data
    const tagsSpinner = ora("Loading Tags").start();

    const { content: defaultCategory } = await tagCategoryService.findByAbbr(TC.DEFAULTABBR);

    const tagsPromises = tagsData.map(async ({ name, html, category, description, validAttrs }) => { 
        const { status: tagExists } = await tagService.findOneByHTML(html);
        if (tagExists) return;

        const { status: categoryExists, content: categoryFound } =
            await tagCategoryService.findByAbbr(category);
        
        let catID = "";
        if (categoryExists) {
            catID = categoryFound._id;
        } else { 
            catID = defaultCategory._id;
        }

        await tagService.create(name, html, description, catID, validAttrs);
        
    });

    const TAcceptance = await Promise.all(tagsPromises);
    tagsSpinner.succeed("Tags loaded");
}

runInstallation();